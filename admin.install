<?php
// $Id: admin.install,v 1.1.2.7.2.4.2.1 2010/09/15 19:28:38 jmiccolis Exp $

/**
 * @file
 * Install, update and uninstall functions for the admin module.
 *
 */

/**
 * Implements hook_install().
 */
function admin_install() {
  if (db_table_exists('menu_custom') && !db_query("SELECT menu_name FROM {menu_custom} WHERE menu_name = :menu_name", array(':menu_name' => 'admin'))->fetchField()) {
    $t = get_t();
    // TODO Please review the conversion of this statement to the D7 database API syntax.
    /* db_query("INSERT INTO {menu_custom} (menu_name, title, description) VALUES ('%s', '%s', '%s')", 'admin', $t('Admin'), $t('Administrative links.')) */
    $id = db_insert('menu_custom')
  ->fields(array(
    'menu_name' => 'admin',
    'title' => $t('Admin'),
    'description' => $t('Administrative links.'),
  ))
  ->execute();
  }
}

/**
 * Implements hook_uninstall().
 */
function admin_uninstall() {
  if (db_table_exists('menu_custom')) {
    // TODO Please review the conversion of this statement to the D7 database API syntax.
    /* db_query("DELETE FROM {menu_custom} WHERE menu_name = 'admin'") */
    db_delete('menu_custom')
  ->condition('menu_name', 'admin')
  ->execute();
  }
  variable_del('admin_toolbar');
}

/**
 * Implements hook_enable().
 */
function admin_enable() {
  $result = db_query("SELECT * FROM {menu_links} WHERE link_path LIKE 'admin%'", array());
  foreach ($result  as $item) {
    _menu_delete_item($item, TRUE);
  }
  menu_rebuild();

  // Weight admin to come after other modules -- in particular, admin_theme().
  // TODO Please review the conversion of this statement to the D7 database API syntax.
  /* db_query("UPDATE {system} SET weight = 1 WHERE name = 'admin' AND type = 'module'") */
  db_update('system')
  ->fields(array(
    'weight' =>  1,
  ))
  ->condition('name', 'admin')
  ->condition('type', 'module')
  ->execute();
}

/**
 * Update 6001: Create admin menu.
 */
function admin_update_6001() {
  $return = array();
  // TODO update_sql has been removed. Use the database API for any schema or data changes.
  $return[] = array() /* update_sql("INSERT INTO {menu_custom} (menu_name, title, description) VALUES ('admin', 'Admin', 'Admin links.')") */;
  // hook_update_N() no longer returns a $ret array. Instead, return
  // nothing or a translated string indicating the update ran successfully.
  // See http://drupal.org/node/224333#update_sql.
  return t('TODO Add a descriptive string here to show in the UI.') /* $return */;
}

/**
 * Update 6002: Update theme namespace to 'slate' & clears out any customizations to key admin menu items.
 */
function admin_update_6002() {
  // TODO Please review the conversion of this statement to the D7 database API syntax.
  /* db_query("DELETE FROM {system} WHERE name = 'admin' AND type = 'theme'") */
  db_delete('system')
  ->condition('name', 'admin')
  ->condition('type', 'theme')
  ->execute();
  _admin_theme_rebuild(TRUE);

  if (variable_get('admin_theme', NULL) == 'admin') {
    variable_set('admin_theme', 'slate');
  }

  $result = db_query("SELECT * FROM {menu_links} WHERE link_path LIKE 'admin%'", array());
  while ($item = db_fetch_array($result)) {
    _menu_delete_item($item, TRUE);
  }
  menu_rebuild();

  // hook_update_N() no longer returns a $ret array. Instead, return
  // nothing or a translated string indicating the update ran successfully.
  // See http://drupal.org/node/224333#update_sql.
  return t('TODO Add a descriptive string here to show in the UI.') /* array() */;
}

/**
 * Update 6003: Weight admin module.
 */
function admin_update_6003() {
  // Weight admin to come after other modules -- in particular, admin_theme().
  $return = array();
  // TODO update_sql has been removed. Use the database API for any schema or data changes.
  $return[] = array() /* update_sql("UPDATE {system} SET weight = 1 WHERE name = 'admin' AND type = 'module'") */;
  // hook_update_N() no longer returns a $ret array. Instead, return
  // nothing or a translated string indicating the update ran successfully.
  // See http://drupal.org/node/224333#update_sql.
  return t('TODO Add a descriptive string here to show in the UI.') /* $return */;
}

/**
 * Update 6201: Migrate previous permissions for "admin menu" to "use admin toolbar".
 */
function admin_update_6201() {
  $return = array();

  $result = db_query("SELECT * FROM {permission}");
  while ($row = db_fetch_object($result)) {
    $perms = explode(', ', $row->perm);
    if (in_array('admin menu', $perms, TRUE)) {
      $key = array_search('admin menu', $perms);
      $perms[$key] = 'use admin toolbar';
      $perms = implode(', ', $perms);
      // TODO update_sql has been removed. Use the database API for any schema or data changes.
      $return[] = array() /* update_sql("UPDATE {permission} SET perm = '{$perms}' WHERE pid = {$row->pid}") */;
    }
  }

  // Remove old theme instantiation stack & reset admin theme if
  // referring to deprecated admin themes.
  variable_del('admin_theme_invalidated');
  $theme = variable_get('admin_theme', '0');
  if ($theme === 'admin' || $theme === 'slate') {
    variable_del('admin_theme');
  }

  // hook_update_N() no longer returns a $ret array. Instead, return
  // nothing or a translated string indicating the update ran successfully.
  // See http://drupal.org/node/224333#update_sql.
  return t('TODO Add a descriptive string here to show in the UI.') /* $return */;
}

/**
 * Update 6202: Update the format of the admin_toolbar variable.
 */
function admin_update_6202() {
  $ret = array();
  $settings = variable_get('admin_toolbar', array());
  if (isset($settings['blocks'])) {
    $needs_update = FALSE;
    // First pass, determine if we need to update these.
    foreach ($settings['blocks'] as $bid => $status) {
      if (!is_numeric($status)) {
        $needs_update = TRUE;
        break;
      }
    }
    if ($needs_update) {
      module_load_include('module', 'admin', 'admin');
      $defaults = admin_get_default_blocks(TRUE);
      // Second pass, do the update!
      foreach ($settings['blocks'] as $bid => $status) {
        if ($status) {
          $settings['blocks'][$bid] = isset($defaults[$bid]) ? $defaults[$bid] : BLOCK_NO_CACHE;
        }
        else {
          unset($settings['blocks'][$bid]);
        }
      }
      variable_set('admin_toolbar', $settings);
      $ret[] = array(
        'success' => TRUE,
        'query' => 'Updated admin settings.',
      );
    }
  }
  // hook_update_N() no longer returns a $ret array. Instead, return
  // nothing or a translated string indicating the update ran successfully.
  // See http://drupal.org/node/224333#update_sql.
  return t('TODO Add a descriptive string here to show in the UI.') /* $ret */;
}
